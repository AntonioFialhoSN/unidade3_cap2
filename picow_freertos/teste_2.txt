#include <stdio.h>
#include "pico/stdlib.h"
#include "pico/multicore.h"
#include "hardware/adc.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

// --- Definições de pinos ---
#define VRX_PIN 27 // ADC1
#define VRY_PIN 26 // ADC0
#define BUTTON_PIN 5
#define LED_PIN 13

// --- Handles globais ---
QueueHandle_t joystick_queue;
SemaphoreHandle_t usb_mutex;
SemaphoreHandle_t button_semaphore;

// Função de impressão protegida por mutex
void safe_print(const char *msg) {
    xSemaphoreTake(usb_mutex, portMAX_DELAY);
    printf("%s\n", msg);
    xSemaphoreGive(usb_mutex);
}

// --- Tarefa: Leitura do Joystick e envio por fila (Núcleo 0) ---
void sensor_task(void *param) {
    adc_init();
    adc_gpio_init(VRX_PIN);
    adc_gpio_init(VRY_PIN);
    while (1) {
        uint16_t vrx = 0, vry = 0;
        adc_select_input(1); // VRX
        vrx = adc_read();
        adc_select_input(0); // VRY
        vry = adc_read();
        uint16_t data[2] = {vrx, vry};
        xQueueSend(joystick_queue, &data, 0);
        
        char msg[64];
        snprintf(msg, sizeof(msg), "Leitura Joystick - VRX: %d, VRY: %d (Core %d)", 
                data[0], data[1], get_core_num());
        safe_print(msg);
        
        vTaskDelay(pdMS_TO_TICKS(200));
    }
}

// --- Tarefa: Monitoramento do botão e liberação de semáforo (Núcleo 0) ---
void button_task(void *param) {
    gpio_init(BUTTON_PIN);
    gpio_set_dir(BUTTON_PIN, GPIO_IN);
    gpio_pull_up(BUTTON_PIN); // Evita flutuação
    while (1) {
        if (!gpio_get(BUTTON_PIN)) { // Pressionado (nível baixo)
            xSemaphoreGive(button_semaphore); // Sinaliza evento
            safe_print("Botão pressionado detectado!");
            vTaskDelay(pdMS_TO_TICKS(200)); // Debounce simples
        } else {
            vTaskDelay(pdMS_TO_TICKS(10));
        }
    }
}

// --- Tarefa: Atua sobre LED e escreve na serial protegida por mutex (Núcleo 1) ---
void actuator_task(void *param) {
    gpio_init(LED_PIN);
    gpio_set_dir(LED_PIN, GPIO_OUT);
    uint16_t data[2];
    while (1) {
        // Se evento do botão for detectado
        if (xSemaphoreTake(button_semaphore, 0) == pdTRUE) {
            safe_print("Processando evento do botão...");
            for (int i = 0; i < 3; i++) {
                gpio_put(LED_PIN, 1);
                vTaskDelay(pdMS_TO_TICKS(100));
                gpio_put(LED_PIN, 0);
                vTaskDelay(pdMS_TO_TICKS(100));
            }
        }
        
        // Se dados do joystick forem recebidos
        if (xQueueReceive(joystick_queue, &data, pdMS_TO_TICKS(10)) == pdTRUE) {
            char msg[64];
            snprintf(msg, sizeof(msg), "Processando Joystick - VRX: %d, VRY: %d (Core %d)", 
                    data[0], data[1], get_core_num());
            safe_print(msg);
            
            // Indicação visual simples: acende LED se valores altos
            if (data[0] > 3000 || data[1] > 3000) {
                gpio_put(LED_PIN, 1);
            } else {
                gpio_put(LED_PIN, 0);
            }
        }
        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

// --- Função principal ---
int main() {
    stdio_init_all();
    sleep_ms(2000); // Pequeno delay para inicializar USB Serial
    
    // Criação dos recursos
    joystick_queue = xQueueCreate(5, sizeof(uint16_t[2]));
    usb_mutex = xSemaphoreCreateMutex();
    button_semaphore = xSemaphoreCreateBinary();
    
    // Criação das tarefas
    TaskHandle_t sensor_handle, button_handle, actuator_handle;
    
    xTaskCreate(sensor_task, "Sensor", 256, NULL, 1, &sensor_handle);
    xTaskCreate(button_task, "Button", 256, NULL, 1, &button_handle);
    xTaskCreate(actuator_task, "Actuator", 512, NULL, 1, &actuator_handle);
    
    // Afinidade de núcleo (core pinning)
    vTaskCoreAffinitySet(sensor_handle, (1 << 0));   // Core 0
    vTaskCoreAffinitySet(button_handle, (1 << 0));   // Core 0
    vTaskCoreAffinitySet(actuator_handle, (1 << 1)); // Core 1
    
    // Inicia o escalonador
    vTaskStartScheduler();
    
    while (true);
    return 0;
}